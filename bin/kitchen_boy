#!/usr/bin/env ruby

require 'gli'
require 'kitchen_boy.rb'

include GLI::App
include KitchenBoy::Logger

program_desc "Run, write, store and share recipes to run on your projects."

version KitchenBoy::VERSION

@config = KitchenBoy::Config.new

flag ['home-dir'], default_value: @config.home_dir

desc "Update recipes"
long_desc <<-STRING
Fetch kitchen_boy default recipes together with the ones you specified
in #{File.join(@config.home_dir, 'recipe_books')}
STRING

command :update do |c|
  c.action do |global_options, options, args|
    if @config.bootstrap_home_dir
      @config.sources += KitchenBoy::DSL::RecipeBooks.new(@config).sources
      @config.sources.each do |s|
        KitchenBoy::RecipeBook.new(@config, s).update
      end
      log_success("Updated recipes!")
    else
      log_error("Error creating or accessing kitchen_boy home dir: #{@config.home_dir}")
      raise
    end
  end
end

desc "Apply recipe"
long_desc <<-STRING
Apply the informed recipe or search in the recipe books.
STRING
arg_name('recipe', :multiple)
command [:cook, :install] do |c|
  c.action do |global_options, options, args|
    @cooker = KitchenBoy::Cooker.new(@config)
    @cooker.run(args[0])
  end
end

pre do |global_options, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  @config.home_dir = global_options['home-dir']
  true
end

post do |global_options, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  puts exception
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
